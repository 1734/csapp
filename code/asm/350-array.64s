	.file	"350-array.c"
	.text
	.globl	get_value
	.type	get_value, @function
get_value:
	leaq	(%rsi,%rsi,2), %rax
	leaq	(%rdi,%rax,4), %rax
	movl	(%rax,%rdx,4), %eax
	ret
	.size	get_value, .-get_value
	.globl	get_value2
	.type	get_value2, @function
get_value2:
	movq	(%rdi,%rsi,8), %rax
	movl	(%rax,%rdx,8), %eax
	ret
	.size	get_value2, .-get_value2
	.globl	new_fix_matrix
	.type	new_fix_matrix, @function
new_fix_matrix:
	subq	$8, %rsp
	movl	$1024, %edi
	call	malloc@PLT
	addq	$8, %rsp
	ret
	.size	new_fix_matrix, .-new_fix_matrix
	.globl	fix_prod_ele
	.type	fix_prod_ele, @function
fix_prod_ele:
	movq	%rdi, %r9
	movq	%rsi, %r10
	movl	$0, %r8d
	movl	$0, %eax
	jmp	.L6
.L7:
	movq	%rdx, %rdi
	salq	$6, %rdi
	addq	%r9, %rdi
	movq	%rax, %rsi
	salq	$6, %rsi
	addq	%r10, %rsi
	movl	(%rsi,%rcx,4), %esi
	imull	(%rdi,%rax,4), %esi
	addl	%esi, %r8d
	addq	$1, %rax
.L6:
	cmpq	$15, %rax
	jle	.L7
	movl	%r8d, %eax
	ret
	.size	fix_prod_ele, .-fix_prod_ele
	.globl	fix_prod_ele_opt
	.type	fix_prod_ele_opt, @function
fix_prod_ele_opt:
	salq	$6, %rdx
	addq	%rdx, %rdi
	salq	$2, %rcx
	leaq	(%rsi,%rcx), %rax
	leaq	1024(%rsi,%rcx), %rsi
	movl	$0, %ecx
.L9:
	movl	(%rax), %edx
	imull	(%rdi), %edx
	addl	%edx, %ecx
	addq	$4, %rdi
	addq	$64, %rax
	cmpq	%rax, %rsi
	jne	.L9
	movl	%ecx, %eax
	ret
	.size	fix_prod_ele_opt, .-fix_prod_ele_opt
	.globl	fix_set_diag
	.type	fix_set_diag, @function
fix_set_diag:
	movl	$0, %eax
	jmp	.L11
.L12:
	movq	%rax, %rdx
	salq	$6, %rdx
	addq	%rdi, %rdx
	movl	%esi, (%rdx,%rax,4)
	addq	$1, %rax
.L11:
	cmpq	$15, %rax
	jle	.L12
	ret
	.size	fix_set_diag, .-fix_set_diag
	.globl	fix_set_diag_opt
	.type	fix_set_diag_opt, @function
fix_set_diag_opt:
	movl	$0, %eax
.L14:
	movl	%esi, (%rdi,%rax,4)
	addq	$17, %rax
	cmpq	$272, %rax
	jne	.L14
	ret
	.size	fix_set_diag_opt, .-fix_set_diag_opt
	.globl	fix_ele
	.type	fix_ele, @function
fix_ele:
	movslq	%esi, %rsi
	salq	$6, %rsi
	addq	%rsi, %rdi
	movslq	%edx, %rdx
	movl	(%rdi,%rdx,4), %eax
	ret
	.size	fix_ele, .-fix_ele
	.globl	new_var_matrix
	.type	new_var_matrix, @function
new_var_matrix:
	subq	$8, %rsp
	imulq	%rdi, %rdi
	salq	$2, %rdi
	call	malloc@PLT
	addq	$8, %rsp
	ret
	.size	new_var_matrix, .-new_var_matrix
	.globl	var_ele
	.type	var_ele, @function
var_ele:
	imulq	%rdi, %rdx
	leaq	(%rsi,%rdx,4), %rax
	movl	(%rax,%rcx,4), %eax
	ret
	.size	var_ele, .-var_ele
	.globl	pvar_ele
	.type	pvar_ele, @function
pvar_ele:
	call	var_ele
	ret
	.size	pvar_ele, .-pvar_ele
	.globl	var_prod_ele
	.type	var_prod_ele, @function
var_prod_ele:
	movq	%rsi, %r10
	movq	%rdx, %r11
	movl	$0, %esi
	movl	$0, %eax
	jmp	.L21
.L22:
	movq	%rcx, %rdx
	imulq	%rdi, %rdx
	leaq	(%r10,%rdx,4), %r9
	movq	%rax, %rdx
	imulq	%rdi, %rdx
	leaq	(%r11,%rdx,4), %rdx
	movl	(%rdx,%r8,4), %edx
	imull	(%r9,%rax,4), %edx
	addl	%edx, %esi
	addq	$1, %rax
.L21:
	cmpq	%rdi, %rax
	jl	.L22
	movl	%esi, %eax
	ret
	.size	var_prod_ele, .-var_prod_ele
	.globl	var_prod_ele_opt
	.type	var_prod_ele_opt, @function
var_prod_ele_opt:
	movq	%rdi, %r9
	movq	%rsi, %r10
	leaq	0(,%rdi,4), %r11
	imulq	%rdi, %rcx
	leaq	(%rdx,%r8,4), %rsi
	movl	$0, %eax
	movl	$0, %edi
	jmp	.L24
.L25:
	leaq	(%rcx,%rax), %r8
	movl	(%rsi), %edx
	imull	(%r10,%r8,4), %edx
	addl	%edx, %edi
	addq	%r11, %rsi
	addq	$1, %rax
.L24:
	cmpq	%r9, %rax
	jl	.L25
	movl	%edi, %eax
	ret
	.size	var_prod_ele_opt, .-var_prod_ele_opt
	.globl	B
	.section	.data.rel.local,"aw"
	.align 32
	.type	B, @object
	.size	B, 32
B:
	.quad	row0
	.quad	row1
	.quad	row2
	.quad	row3
	.globl	row3
	.bss
	.align 8
	.type	row3, @object
	.size	row3, 12
row3:
	.zero	12
	.globl	row2
	.align 8
	.type	row2, @object
	.size	row2, 12
row2:
	.zero	12
	.globl	row1
	.align 8
	.type	row1, @object
	.size	row1, 12
row1:
	.zero	12
	.globl	row0
	.align 8
	.type	row0, @object
	.size	row0, 12
row0:
	.zero	12
	.globl	A
	.align 32
	.type	A, @object
	.size	A, 60
A:
	.zero	60
	.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
	.section	.note.GNU-stack,"",@progbits
